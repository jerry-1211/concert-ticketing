@startuml 결제_처리_플로우
!theme plain

actor 사용자 as User
participant Frontend
participant PaymentApiController as PaymentAPI
participant PaymentService
participant TossPaymentClient as TossClient
participant "토스 서버" as TossServer
participant PaymentWebhookController as WebhookAPI
participant PaymentWebhookService as WebhookService
database Database as DB

title 결제 처리 플로우

== 1. 결제 요청 ==
User -> Frontend: 결제 진행
Frontend -> PaymentAPI: POST "/api/payment/request"
PaymentAPI -> PaymentService: createPayment()
PaymentService -> DB: 결제정보 저장 (Pending상태)
PaymentService --> PaymentAPI: 결제 요청 생성
PaymentAPI --> Frontend: 결제 정보 반환

== 2. 결제 확인 ==
User -> Frontend: 토스 결제 완료
Frontend -> PaymentAPI: POST "/api/payment/toss/confirm"
PaymentAPI -> PaymentService: confirmPayment()
PaymentService -> TossClient: 토스서버 POST
TossClient -> TossServer: 결제 검증 요청
TossServer --> TossClient: 검증 결과 반환

== 3. 결제 결과 ==
alt 성공시
    PaymentService -> DB: 상태 → CONFIRMED
else 실패시
    PaymentService -> DB: 상태 → FAIL
end
PaymentService --> PaymentAPI: 결제 결과
PaymentAPI --> Frontend: 응답 반환

== 4. 웹훅 처리 ==
TossServer -> WebhookAPI: POST "/api/webhook/payment"
WebhookAPI -> WebhookService: paymentWebhookService.handleWebhook()
WebhookService -> WebhookService: finalizeOrder()
note right of WebhookService
  confirm에서 처리하지 못한 내용들 모두 처리
end note
WebhookService -> DB: 최종 업데이트
WebhookService --> WebhookAPI: 처리 완료


@enduml
