@startuml
!theme plain
autonumber "<b>[00]"

title 결제 생성 및 승인

actor User as "사용자"

box "Application Server" #LightCyan
    participant Controller
    participant Service
    participant Client as "Toss API Client"
    participant Publisher
end box

participant TOSS as "Toss Payments API"
database DB

box "Message Queue" #LightYellow
    participant Exchange
    participant Queue
    participant Handler as "EventHandler"
end box


== 1. 결제 생성 ==
User -> Controller: 결제 생성 요청 (POST /api/payment/request)
Controller -> Service: createPayment(request)
Service -> DB: 결제 정보 생성 (상태: PENDING)
DB --> Service: 생성된 Payment 객체
Service -> Controller: 결제 정보(orderId) 반환
Controller --> User: **결제창 호출용 정보 응답**

... 사용자는 결제창에서 결제 후 웹 페이지로 리다이렉트 ...

== 2. 결제 승인 ==
User -> Controller: 결제 승인 요청 (POST /api/payment/toss/confirm)
Controller -> Service: confirmPayment(request)
Service -> Client:  Toss에 최종 결제 승인 요청   **[S2S]**
Service -> Publisher: '결제 확정' 이벤트 발행  **[비동기 처리]**
Service -> DB: 주문 ID로 결제 정보 조회
DB --> Service: 조회된 Payment 객체
Service -> Controller: **DB 조회 결과로** 최종 응답 생성
Controller --> User: **최종 처리 결과 응답 (200 OK)**


== 2-1. 결제 확정 (메시지 큐)==
Publisher -> Exchange: '결제 확정' 이벤트 전송
Exchange -> Queue: 메시지 라우팅
Queue -> Handler: 이벤트 수신
Handler -> DB: **결제 상태 CONFIRMED**


== 3. 웹훅 수신 및 처리 ==
TOSS -> Controller: 웹훅 수신 (POST /api/webhook/payment)

Controller -> Service: 웹훅 처리 요청
Service -> DB: **Reservation.status -> CONFIRMED**
Service -> DB: **ConcertSeat.status -> RESERVED**

Service -> Publisher: '결제 완료' 웹훅 이벤트 발행  **[비동기]**


== 3-1. 결제 완료 (메시지 큐)==
Publisher -> Exchange: 이벤트 전송
Exchange -> Queue: 메시지 라우팅
Queue -> Handler: 이벤트 수신
Handler -> DB: **결제 상태 COMPLETE**

@enduml