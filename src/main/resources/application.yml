# Application Configuration
spring:
  application:
    name: concert

  output:
    ansi:
      enabled: always

  #  profiles:
  #    active: test

  # Database Configuration
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 10
      connection-timeout: 10000
      idle-timeout: 300000
      max-lifetime: 600000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 30
    defer-datasource-initialization: true

  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URI}
            scope:
              - profile
              - email
        provider:
          google:
            authorization-uri: ${GOOGLE_AUTHORIZATION_URI}

  # RabbitMQ Configuration
  rabbitmq:
    host: rabbitmq
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000
        default-requeue-rejected: false
    publisher-confirm-type: correlated

  # Spring Boot Admin Configuration
  boot:
    admin:
      context-path: /admin
      client:
        url: "http://localhost:8080/admin"
        auto-registration: true
        instance:
          name: "Ticketing Application"
          service-url: "http://localhost:8080"

  # Redis Configuration
  data:
    redis:
      host: redis
      port: 6379
      timeout: 2000ms

# Server Configuration
server:
  tomcat:
    threads:
      max: 200
      min-spare: 50
    connection-timeout: 20000

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: concert

# External Services Configuration
toss:
  payments:
    test-secret-api-key: ${TOSS_PAYMENTS_SECRET_KEY}
    success-url: ${TOSS_SUCCESS_URL}
    fail-url: ${TOSS_FAIL_URL}
    base-url: ${TOSS_BASE_URL}

google:
  oauth2:
    authorized-redirect-uri: ${GOOGLE_AUTHORIZED_REDIRECT_URI}

jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION}
